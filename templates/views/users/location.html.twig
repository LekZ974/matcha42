{% extends "views/base/base.html.twig" %}

{% block body %}
    <div class="sidebar">
    {% include '/views/users/fragments/_sidebar.html.twig' %}
    </div>
    <div class="col-md-9">
    <h1>Location</h1>
        <div id="map_canvas"></div>
    <form class="form-horizontal" method="post" action="{{ path_for('edit', { 'profil': 'location' }) }}">
        <div class="panel panel-heading">
            <label class="control-label">Where are you?</label>
            <div>
                <input type="text" name="city" id="city_form_affinage" placeholder="Lieu" />
                {#<label for="country">Country : </label>#}
                {#<!-- Le champ "region" 1ère autocomplétion -->#}
                {#<input type="input" name="country" id="country" value="" />#}
                {#<div class="update" id="country_update"></div>#}
            </div>
            {#<div>#}
                {#<label for="zipCode">ZIP code : </label>#}
                {#<!-- Le champ "region" 1ère autocomplétion -->#}
                {#<input type="input" name="zipCode" id="zipCode" value="" />#}
                {#<div class="update" id="zipCode_update"></div>#}
            {#</div>#}
            {#<div>#}
                {#<label for="region">Region : </label>#}
                {#<!-- Le champ "region" 1ère autocomplétion -->#}
                {#<input type="input" name="region" id="region" value="" />#}
                {#<div class="update" id="region_update"></div>#}
            {#</div>#}
            {#<div>#}
                {#<label for="city">City : </label>#}
                {#<!-- Le champ "city" 2ème autocomplétion, liée à "region" -->#}
                {#<input type="input" name="city" id="city" value="" />#}
                {#<div class="update" id="city_update"></div>#}
            {#</div>#}
            {#<div>#}
                {#<!-- Le champ caché "region_id" pour region -->#}
                {#<input type="hidden" name="region_id" id="region_id" value="" />#}
                {#<!-- Le champ caché "city_id" pour city (si, si, sans déconner !) -->#}
                {#<input type="hidden" name="city_id" id="city_id" value="" />#}
            {#</div>#}
        {#</div>#}
        <div class="panel panel-heading">
            <label class="control-label">Or active location for a better experience</label>
            <a href="#" id="locateUser" class="btn btn-success" name="locateUser" value="locateUser"><i class="fa fa-map-marker" aria-hidden="true"></i></a>
        </div>
            <input type="submit" class="btn btn-success" value="Update profil">
        </div>
    </form>
    </div>

    <script>
        function initialize() {
            var mapOptions = {
                center: new google.maps.LatLng(-33.8688, 151.2195),
                zoom: 13,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            var map = new google.maps.Map(document.getElementById('map_canvas'),
                mapOptions);

            var input = document.getElementById('city_form_affinage');
            var autocomplete = new google.maps.places.Autocomplete(input);

            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map
            });

            google.maps.event.addListener(autocomplete, 'place_changed', function() {
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    // Inform the user that the place was not found and return.
                    input.className = 'notfound';
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                var image = new google.maps.MarkerImage(
                    place.icon,
                    new google.maps.Size(71, 71),
                    new google.maps.Point(0, 0),
                    new google.maps.Point(17, 34),
                    new google.maps.Size(35, 35));
                marker.setIcon(image);
                marker.setPosition(place.geometry.location);
                var data = place.address_components.reverse();
                console.log(data);
                $.ajax({
                    url: '/updateLocation',
                    type: 'POST',
                    data : {
                        country : data[1].long_name,
                        region : data[2].long_name,
                        city : data[3].long_name,
                        zipCode: data[0].long_name,
                        lat : place.geometry.location.lat(),
                        lon : place.geometry.location.lng()
                    },
                    success : function (response) {

                    }
                });
            });
        }
        google.maps.event.addDomListener(window, 'load', initialize);
    </script>


{% endblock %}